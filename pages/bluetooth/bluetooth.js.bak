Page({
    /**
     * 页面的初始数据
     */
    data: {
        connect: false,
        send_hex: false,
        send_string: true,
        send_string_val: 'Hex',
        recv_string: true,
        recv_string_val: 'Hex',
        recv_value: '',
        send_number: 0,
        recv_number: 0,
        recv_hex: true,
        wendu: 30,
        yanwu: 60,
        car_num: '',
        car_user:'',
        phoneType: 0, //0ios手机；1android,
        sendCode:false
    },
 
    /*** 生命周期函数--监听页面加载 */
    onLoad: function (options) {
        wx.stopBluetoothDevicesDiscovery({
            success: function (res) {
                console.log('停止搜索设备', res)
            }
        })
        console.log(options);
        this.setData({
            deviceMId: options.id,  //mac地址android使用
            deviceName: options.name,
            car_num: options.car_num,
            car_user: options.car_user
        });

        var that = this;
        //判断手机机型
        wx.getSystemInfo({
            success:function(res){
              if(res.platform == "android"){
                that.setData({
                    phoneType: 1,
                    deviceId:that.data.deviceMId
                });
              }else if(res.platform == "ios"){
                that.setData({
                    phoneType: 0
                });
              }
            }
          });
        console.log("phoneType:"+this.data.phoneType);
        console.log("car_num:"+this.data.car_num);
      
        wx.openBluetoothAdapter({
				success: function (res) {
					console.log("初始化蓝牙适配器成功")
					console.log(res)
                    
                    if(that.data.phoneType==0){
                    	
                    	
                    
                    	
                        //ios设备，需要搜索蓝牙，根据蓝牙名称获取设备uuid
                        wx.startBluetoothDevicesDiscovery({
                        //		services: params.services,
                                success: function (res) 
                                {
                                    console.log(res)
                                    console.log("开启搜索成功")
	                                    that.setData({
																							 info: '正在搜索蓝牙设备.....'
																			 })
																 			for(let idx=0;idx<1;idx++)
                     									{	
                     	  								 wx.getBluetoothDevices({
	                                        success: function (res) 
	                                        {
	                                            console.log("getBluetoothDevices");
	                                            console.log(res.devices);
	                                            for(let i=0;i<res.devices.length;i++)
	                                            {
	                                                if(res.devices[i]['localName']==that.data.car_num){
	                                                    that.setData({
	                                                        deviceId:res.devices[i]['deviceId']
	                                                    });
	                                                    //停止搜索蓝牙
																							         wx.stopBluetoothDevicesDiscovery({
																												   success: function (res) {
																												   console.log('停止搜索设备')
																													// console.log( res)
																												 }
																										 })
	                                                   
	                                                    that.connectBlue();
	                                                 
	                                                    return;
	                                                }
	                                            }
	                                            //连接蓝牙
	                                            that.setData({
																									          info: '信息:没有搜索到叉车设备,正在重连...'
																							 })
																							 
																							  //启动定时器-1秒以后重连
																							 setTimeout(function() {
																								         that.ReSearch();
																								      }, 2000);
	                                        },
	                                        fail: function (res) {
	                                        	
																							            that.setData({
																									          info: '信息:没有搜索到叉车设备!!'
																									         })
	                                            console.log("没有搜索到要链接的设备....")
	                                            console.log(res)
	                                            return
	                                        }
	                                    })
                     	 								
                        
                    						 			}			
    
                                }, 
                                fail: function (res) {
                                	 that.setData({
														          info: '错误:开启蓝牙搜索失败!!'
														         })
                                    console.log("开启搜索失败")
                                    console.log(res)
                                    //params.onFailCallBack(res)
                                    return
                                },
                                complete: function (res) {
                                    // complete
                                    console.log(res);
                                }
                        })
                        
                        
												

                    }else{
                        //android设备，直接连接蓝牙，无需搜索
                        that.connectBlue();
                    }
						
				}, 
				fail: function (res) {
					console.log("初始化蓝牙适配器失败")
				  that.setData({
          info: '错误:请打开蓝牙和定位功能!!'
         })
				 //params.onFailCallBack(res.errMsg)
					console.log(res);
					return
				},
				complete: function (res) {
			
				console.log(res);
				}
				})
        
                
        
        
        
    },
    //蓝牙连接
    connectBlue:function(){
        var that = this;
        /* 连接中动画 */
        wx.showLoading({
            title: '连接中...',
        });
        /* 开始连接蓝牙设备 */
        wx.createBLEConnection({
            deviceId: that.data.deviceId,
            success: function (res) {
                console.log('连接成功', res);
                wx.hideLoading();
                
                 that.setData({
														          info: '连接成功!!'
								 })

                /* 获取设备的服务UUID */
                wx.getBLEDeviceServices({
                    deviceId: that.data.deviceId,
                    success: function (service) {
                        that.setData({
                            serviceId: "0000FFE0-0000-1000-8000-00805F9B34FB" //确定需要的服务UUID
                        });
                        console.log('需要的服务UUID', that.data.serviceId)
                        that.Characteristics(); //调用获取特征值函数
                    },
                });
                that.setData({
                    connect: true
                })
            },
            fail: function (res) {
            	     that.setData({
													 info: '错误:连接失败!!'
										  })
                    console.log("连接失败")
                    console.log(res);
                    console.log(that.data.deviceId);
                    setTimeout(function(){
                        wx.hideLoading();
                        },60000)
                    return
                },
        })
    },
    /*** 生命周期函数--监听页面显示 */
    onShow: function () {
       
        
    },
    Characteristics: function () {
        var that = this;
        var device_characteristics = [];
        var characteristics_uuid = {};
        wx.getBLEDeviceCharacteristics({
            deviceId: that.data.deviceId,
            serviceId: that.data.serviceId,
            success: function (res) {
                var characteristics = res.characteristics; //获取到所有特征值
                var characteristics_length = characteristics.length; //获取到特征值数组的长度
                console.log('获取到特征值', characteristics);
                console.log('获取到特征值数组长度', characteristics_length);
                that.setData({
                    notycharacteristicsId: "0000FFE1-0000-1000-8000-00805F9B34FB", //需确定要的使能UUID
                    characteristicsId: "0000FFE1-0000-1000-8000-00805F9B34FB" //暂时确定的写入UUID
                });

                console.log('使能characteristicsId', that.data.notycharacteristicsId);
                console.log('写入characteristicsId', that.data.characteristicsId);
                that.notycharacteristicsId(); //使能事件
                that.sendMsg();

            },
        })
    },
    /* 使能函数 */
    notycharacteristicsId: function () {
        var that = this;
        var recv_value_ascii = "";
        var string_value = "";
        var recve_value = "";
        wx.notifyBLECharacteristicValueChange({
            deviceId: that.data.deviceId,
            serviceId: that.data.serviceId,
            characteristicId: that.data.notycharacteristicsId,
            state: true,
            success: function (res) {
                console.log('使能成功', res);
                /* 设备返回值 */
                wx.onBLECharacteristicValueChange(function (res) {
                    var length_hex = [];
                    var turn_back = "";
                    var result = res.value;
                    var hex = that.buf2hex(result);
                    console.log('返回的值', hex);
                    if (that.data.recv_string == true) {
                        /* 成功接收到的值的展示 */
                        that.setData({
                            recv_value: that.data.recv_value + hex
                        });
                        /* 接收成功的值的字节 */
                        var recv_number_1 = that.data.recv_number + hex.length / 2;
                        var recv_number = Math.round(recv_number_1);
                        that.setData({
                            recv_number: recv_number
                        });
                    } else {
                        console.log('设备返回来的值', hex);
                        var f_hex = hex;
                        var length_soy = f_hex.length / 2;
                        var length = Math.round(length_soy);
                        for (var i = 0; i < length; i++) {
                            var hex_spalit = f_hex.slice(0, 2);
                            length_hex.push(hex_spalit);
                            f_hex = f_hex.substring(2);
                        }
                        console.log('length_hex', length_hex);
                        for (var j = 0; j < length_hex.length; j++) {

                            var integar = length_hex[j]; //十六进制
                            recve_value = parseInt(integar, 16); //十进制
                            console.log('recve_value', recve_value);

                            turn_back = turn_back + String.fromCharCode(recve_value);
                            console.log('turn_back', turn_back);
                        }

                        console.log('最终转回来的值', turn_back)
                        var recv_number_1 = that.data.recv_number + turn_back.length;
                        var recv_number = Math.round(recv_number_1);
                        that.setData({
                            recv_number: recv_number,
                            recv_value: that.data.recv_value + turn_back
                        })
                    }
                });
            },
            fail: function (res) {
                console.log('使能失败', res);
            }
        })
    },
    /* 断开连接 */
    DisConnectTap: function () {
    	/*
        var that = this;
        wx.closeBLEConnection({
            deviceId: that.data.deviceId,
            success: function (res) {
                console.log('断开设备连接', res);
                wx.reLaunch({
                    url: 'index',
                })
            }
        });
        */
    },
    //重新搜索
     ReSearch:function(){
     	    this.DisConnectTap();
          wx.stopBluetoothDevicesDiscovery({
            success: function (res) {
                console.log('停止搜索设备', res)
            }
        })
       
        var that = this;
        //判断手机机型
        wx.getSystemInfo({
            success:function(res){
              if(res.platform == "android"){
                that.setData({
                    phoneType: 1,
                    deviceId:that.data.deviceMId
                });
              }else if(res.platform == "ios"){
                that.setData({
                    phoneType: 0
                });
              }
            }
          });
        console.log("phoneType:"+this.data.phoneType);
        console.log("car_num:"+this.data.car_num);
      
        wx.openBluetoothAdapter({
				success: function (res) {
					console.log("初始化蓝牙适配器成功")
					console.log(res)
                    
                    if(that.data.phoneType==0){
                    	
                    	
                    
                    	
                        //ios设备，需要搜索蓝牙，根据蓝牙名称获取设备uuid
                        wx.startBluetoothDevicesDiscovery({
                        //		services: params.services,
                                success: function (res) 
                                {
                                   
	                                    that.setData({
																							 info: '正在搜索蓝牙设备.....'
																			 })
																 			for(let idx=0;idx<1;idx++)
                     									{	
                     	  								 wx.getBluetoothDevices({
	                                        success: function (res) 
	                                        {
	                                            console.log("getBluetoothDevices");
	                                            console.log(res.devices);
	                                            for(let i=0;i<res.devices.length;i++)
	                                            {
	                                                if(res.devices[i]['localName']==that.data.car_num){
	                                                    that.setData({
	                                                        deviceId:res.devices[i]['deviceId']
	                                                    });
	                                                    //停止搜索蓝牙
																							         wx.stopBluetoothDevicesDiscovery({
																												   success: function (res) {
																												   console.log('停止搜索设备')
																													 console.log( res)
																												 }
																										 })
	                                                   
	                                                    that.connectBlue();
	                                                
	                                                    
	                                                    return;
	                                                }
	                                            }
	                                            //连接蓝牙
	                                            that.setData({
																									          info: '信息:没有搜索到叉车设备!!'
																							 })
																							 
																							
																							 
																							 
	                                        },
	                                        fail: function (res) {
	                                        	
																							            that.setData({
																									          info: '信息:没有搜索到叉车设备!!'
																									         })
	                                            console.log("没有搜索到要链接的设备....")
	                                            console.log(res)
	                                            return
	                                        }
	                                    })
                     	 								
                        
                    						 			}			
    
                                }, 
                                fail: function (res) {
                                	 that.setData({
														          info: '错误:开启蓝牙搜索失败!!'
														         })
                                   // console.log("开启搜索失败")
                                   // console.log(res)
                                    //params.onFailCallBack(res)
                                    return
                                },
                                complete: function (res) {
                                    // complete
                                  //  console.log(res);
                                }
                        })
                        
                        
												

                    }else{
                        //android设备，直接连接蓝牙，无需搜索
                        that.connectBlue();
                    }
						
				}, 
				fail: function (res) {
					console.log("初始化蓝牙适配器失败")
				  that.setData({
          info: '错误:请打开蓝牙和定位功能!!'
         })
				 //params.onFailCallBack(res.errMsg)
					console.log(res);
					return
				},
				complete: function (res) {
			
				console.log(res);
				}
				})
      
    },
    
    //返回上一页
    BackTap:function(){
        console.log('返回上一页');
        wx.reLaunch({
             url: '../index/index',
        })
    },
   
    /*** 生命周期函数--监听页面卸载  */
    onUnload: function () {
        var that = this;
         //停止搜索蓝牙
          wx.stopBluetoothDevicesDiscovery({
					   success: function (res) {
					   console.log('停止搜索设备')
						 console.log( res)
					 }
			 })
        /*
        wx.closeBLEConnection({
            deviceId: that.data.deviceId,
            success: function (res) {
                console.log('断开设备连接', res);
            }
        });*/
    },
    /* 清除Recv Bytes */
    CleanNumberRecv: function () {
        this.setData({
            recv_number: 0
        })
    },
    strByte:function(str){
        var array = new Uint8Array(str.length);
        for (var i = 0, l = str.length; i < l; i++) {
            array[i] = str.charCodeAt(i);
        }
        console.log(array);
        return array.buffer;
    },
    sendMsg:function(){
        var that = this;
        let buffer = that.strByte("ATPON");

        wx.writeBLECharacteristicValue({
            deviceId: that.data.deviceId,
            serviceId: that.data.serviceId,
            characteristicId: that.data.characteristicsId,
            value: buffer,
            success: function (res) {
                console.log('数据发送成功', res);
                that.setData({
                    sendCode: true
                })
                console.log(buffer);
            },
            fail: function (res) {
                console.log('调用失败', res);
                /* 调用失败时，再次调用 */
                // wx.writeBLECharacteristicValue({
                //     deviceId: that.data.deviceId,
                //     serviceId: that.data.serviceId,
                //     characteristicId: that.data.characteristicsId,
                //     value: buffer,
                //     success: function (res) {
                //         console.log('第2次数据发送成功', res);
                //     }
                // })
            }
        })
    },
    /* ArrayBuffer类型数据转为16进制字符串 */
    buf2hex: function (buffer) { // buffer is an ArrayBuffer
        var hexArr = Array.prototype.map.call(
            new Uint8Array(buffer),
            function (bit) {
                return ('00' + bit.toString(16)).slice(-2)
            }
        )
        return hexArr.join('');
    },
    switch1Change: function (e) {
        var that = this;
        let buffer = new ArrayBuffer("ATPON>")
        let dataView = new DataView(buffer)
        if (e.detail.value) {
            dataView.setUint8(0, 0)
        } else {
            dataView.setUint8(0, 1)
        }

        wx.writeBLECharacteristicValue({
            deviceId: that.data.deviceId,
            serviceId: that.data.serviceId,
            characteristicId: that.data.characteristicsId,
            value: buffer,
            success: function (res) {
                console.log('数据发送成功', res);
                console.log(buffer);
            },
            fail: function (res) {
                console.log('调用失败', res);
                /* 调用失败时，再次调用 */
                wx.writeBLECharacteristicValue({
                    deviceId: that.data.deviceId,
                    serviceId: that.data.serviceId,
                    characteristicId: that.data.characteristicsId,
                    value: buffer,
                    success: function (res) {
                        console.log('第2次数据发送成功', res);
                    }
                })
            }
        })
    },
    switch1Change1: function (e) {
        var that = this;
        let buffer = new ArrayBuffer(1)
        let dataView = new DataView(buffer)
        if (e.detail.value) {
            dataView.setUint8(0, 2)
        } else {
            dataView.setUint8(0, 3)
        }
        wx.writeBLECharacteristicValue({
            deviceId: that.data.deviceId,
            serviceId: that.data.serviceId,
            characteristicId: that.data.characteristicsId,
            value: buffer,
            success: function (res) {
                console.log('数据发送成功', res);
                console.log(buffer);
            },
            fail: function (res) {
                console.log('调用失败', res);
                /* 调用失败时，再次调用 */
                wx.writeBLECharacteristicValue({
                    deviceId: that.data.deviceId,
                    serviceId: that.data.serviceId,
                    characteristicId: that.data.characteristicsId,
                    value: buffer,
                    success: function (res) {
                        console.log('第2次数据发送成功', res);
                    }
                })
            }
        })
    },
    add: function (e) {
        var id = e.target.id;
        if (this.data[id] > 98) {
            wx.showToast({
                title: '已超过最大数值',
                icon: 'loading',
                duration: 2000
            })
            return;
        }
        this.setData({
　　　　　　[id]: +this.data[id] + 1
        });
        this.numbers(id)
    },
    lessen: function (e) {
        var id = e.target.id;
        if (this.data[id] < 1) {
            wx.showToast({
                title: '已小于最小数值',
                icon: 'loading',
                duration: 2000
            })
            return;
        }
        this.setData({
　　　　　　　[id]: +this.data[id] - 1
        });
        this.numbers(id)
    },
    changeVal: function (e) {
        var id = e.target.id;
        if (e.detail.value < 1 || e.detail.value > 100) {
            wx.showToast({
                title: '请输入有效数值',
                icon: 'loading',
                duration: 2000
            })
            return;
        }
        this.setData({
　　　　　　[id]: e.detail.value
        });
        this.numbers(id)
    },
    numbers: function (id) {
        var that = this;
        var number = '9';
        let buffer = new ArrayBuffer(1)
        let dataView = new DataView(buffer)
        console.log(id)
        if (id == 'wendu') {
            number = '8' + that.data[id];
            dataView.setUint8(0, 8)
        } else {
            number = number + that.data[id];
            dataView.setUint8(0, number)
        }
        wx.writeBLECharacteristicValue({
            deviceId: that.data.deviceId,
            serviceId: that.data.serviceId,
            characteristicId: that.data.characteristicsId,
            value: buffer,
            success: function (res) {
                console.log('数据发送成功', res);
                console.log(buffer);
            }
        })
    }
})